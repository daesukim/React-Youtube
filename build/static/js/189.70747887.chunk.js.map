{"version":3,"file":"static/js/189.70747887.chunk.js","mappings":"uJAGA,MA2BA,EA3BoBA,IAAiB,IAAhB,OAAEC,GAAQD,EAC7B,OACEE,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACKH,EAAOI,KAAI,CAACC,EAAOC,KAChBC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOL,SAAA,EAClBF,EAAAA,EAAAA,KAAA,OAAKO,UAAU,wBAAuBL,UAClCF,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CACDC,GAAE,UAAAC,OAAYN,EAAMO,GAAGC,SACvBC,MAAO,CAACC,gBAAgB,OAADJ,OAASN,EAAMW,QAAQC,WAAWC,KAAKC,IAAG,WAGzEZ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYL,SAAA,EACvBF,EAAAA,EAAAA,KAAA,OAAKO,UAAU,QAAOL,UAClBF,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAACC,GAAE,UAAAC,OAAYN,EAAMO,GAAGC,SAAUV,SAAEE,EAAMW,QAAQI,WAE3DnB,EAAAA,EAAAA,KAAA,OAAKO,UAAU,OAAML,UACjBF,EAAAA,EAAAA,KAAA,QAAMO,UAAU,SAAQL,UACpBF,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAACC,GAAE,YAAAC,OAAcN,EAAMW,QAAQK,WAAYlB,SAAEE,EAAMW,QAAQM,wBAbpDhB,MAmBjC,C,8GCnBP,MAiDA,EAjDeiB,KACb,MAAM,SAAEC,IAAcC,EAAAA,EAAAA,MAChBzB,EAAQ0B,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,OAC5CG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAEtCK,EAAAA,EAAAA,YAAU,KACRN,EAAU,IACVO,EAAYT,GACZO,GAAW,EAAK,GACf,CAACP,IAEJ,MAAMS,EAAc,SAACC,GAA2B,IAApBC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IACtCG,EAAAA,EAAAA,GAAa,oCAAD5B,OAAqCuB,EAAK,eAAAvB,OAAcwB,IACnEK,MAAMC,IACHZ,EAAiBY,EAAKb,eACtBF,GAAWgB,GAAe,IAAIA,KAAeD,EAAKE,SAClDZ,GAAW,EAAM,IAEpBa,OAAOC,IACJC,QAAQD,MAAM,uBAAwBA,GACtCd,GAAW,EAAM,GAEvB,EAQMgB,EAAkBjB,EAAU,YAAc,WAEhD,OACE7B,EAAAA,EAAAA,KAAC+C,EAAAA,EAAI,CAAC5B,MAAQ,SAAS6B,YAAc,oBAAmB9C,UACtDI,EAAAA,EAAAA,MAAA,WAASK,GAAK,aAAaJ,UAAWuC,EAAgB5C,SAAA,EACpDF,EAAAA,EAAAA,KAAA,OAAKO,UAAU,qBAAoBL,UACjCF,EAAAA,EAAAA,KAACiD,EAAAA,EAAW,CAAClD,OAAUA,OAEzBC,EAAAA,EAAAA,KAAA,OAAKO,UAAU,aAAYL,SACxByB,IACC3B,EAAAA,EAAAA,KAAA,UAAQkD,QAhBKC,KACfxB,GACAK,EAAYT,EAAUI,EAC1B,EAasCzB,SAAC,iBAIlC,C,gDClDJ,MAEDkD,EAAU,CACZC,OAAQ,CACJC,WAAY,IAEhBC,QAAS,CACL,iBAAkBC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,wBAC9B,kBAAmB,+BAIdnB,EAAeoB,UACxB,MAAM,KAAElB,SAAemB,EAAAA,EAAMC,IAAI,GAADlD,OAbZ,qCAawB,KAAAA,OAAIQ,GAAOkC,GACvD,OAAOZ,CAAI,C","sources":["components/videos/VideoSearch.jsx","pages/Search.jsx","utils/api.js"],"sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst VideoSearch = ({ videos }) => {\r\n  return (\r\n    <>\r\n        {videos.map((video, index) => (\r\n            <div className='video' key={index}>\r\n                <div className=\"video_thumb play_icon\">\r\n                    <Link\r\n                        to={`/video/${video.id.videoId}`}\r\n                        style={{backgroundImage: `url(${video.snippet.thumbnails.high.url})` }}>\r\n                    </Link>\r\n                </div>\r\n                <div className=\"video_info\">\r\n                    <div className=\"title\">\r\n                        <Link to={`/video/${video.id.videoId}`}>{video.snippet.title}</Link>\r\n                    </div>\r\n                    <div className=\"info\">\r\n                        <span className='author'>\r\n                            <Link to={`/channel/${video.snippet.channelId}`}>{video.snippet.channelTitle}</Link>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default VideoSearch\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Main from '../components/section/Main'\r\n\r\nimport VideoSearch from '../components/videos/VideoSearch';\r\nimport {fetchFromAPI} from '../utils/api'\r\n\r\nconst Search = () => {\r\n  const { searchID }  = useParams();\r\n  const[videos, setVideos] = useState([]);\r\n  const[nextPageToken, setNextPageToken] = useState(null);\r\n  const[loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setVideos([]);\r\n    fetchVideos(searchID);\r\n    setLoading(true);\r\n  }, [searchID]);\r\n\r\n  const fetchVideos = (query, pageToken = '') => {\r\n    fetchFromAPI(`search?part=snippet&type=video&q=${query}&pageToken=${pageToken}`)\r\n    .then((data) => {\r\n        setNextPageToken(data.nextPageToken);\r\n        setVideos((prevVideos) => [...prevVideos, ...data.items]);\r\n        setLoading(false);\r\n    })\r\n    .catch((error) => {\r\n        console.error('Error fetching data:', error);\r\n        setLoading(false);\r\n    });\r\n  };\r\n\r\n  const handleLoadMore = () => {\r\n      if (nextPageToken) {\r\n          fetchVideos(searchID, nextPageToken);\r\n      }\r\n  };\r\n\r\n  const searchPageClass = loading ? 'isLoading' : 'isLoaded';\r\n\r\n  return (\r\n    <Main title = \"Search\" description = \"Welcome to Search\">\r\n      <section id = 'searchPage' className={searchPageClass}>\r\n        <div className='video_inner search'>\r\n          <VideoSearch videos = {videos} />\r\n        </div>\r\n        <div className='video_more'>\r\n          {nextPageToken && (\r\n            <button onClick={handleLoadMore}> More </button>\r\n          )}\r\n        </div>\r\n      </section>\r\n    </Main>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","import axios from 'axios';\r\n\r\nexport const BASE_URL = 'https://youtube-v31.p.rapidapi.com';\r\n\r\nconst options = {\r\n    params: {\r\n        maxResults: 48,\r\n    },\r\n    headers: {\r\n        'X-RapidAPI-Key': process.env.REACT_APP_RAPID_API_KEY,\r\n        'X-RapidAPI-Host': 'youtube-v31.p.rapidapi.com',\r\n    },\r\n};\r\n\r\nexport const fetchFromAPI = async (url) => {\r\n    const { data } = await axios.get(`${BASE_URL}/${url}`, options);\r\n    return data;\r\n};"],"names":["_ref","videos","_jsx","_Fragment","children","map","video","index","_jsxs","className","Link","to","concat","id","videoId","style","backgroundImage","snippet","thumbnails","high","url","title","channelId","channelTitle","Search","searchID","useParams","setVideos","useState","nextPageToken","setNextPageToken","loading","setLoading","useEffect","fetchVideos","query","pageToken","arguments","length","undefined","fetchFromAPI","then","data","prevVideos","items","catch","error","console","searchPageClass","Main","description","VideoSearch","onClick","handleLoadMore","options","params","maxResults","headers","process","REACT_APP_RAPID_API_KEY","async","axios","get"],"sourceRoot":""}